openapi: 3.0.3
info:
  title: GymPT API (MVP)
  version: 0.1.0
servers:
  - url: https://api.example.com
paths:
  /users:
    post:
      summary: Create or update a user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Upserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /plans/generate:
    post:
      summary: Generate a new training plan for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Plan generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedTrainingPlan'
  /sessions/today:
    get:
      summary: Get today's session plan for a user
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Today's session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedTrainingSessionPlan'
  /sessions/{sessionId}/logs:
    post:
      summary: Append a set log to a session
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetLog'
      responses:
        '204':
          description: Logged
  /sessions/{sessionId}/complete:
    post:
      summary: Complete a session and capture feedback
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback:
                  $ref: '#/components/schemas/SessionFeedback'
      responses:
        '200':
          description: Session summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionSummary'
  /analytics:
    get:
      summary: Get analytics for a user
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: metrics
          schema:
            type: array
            items:
              type: string
              enum: [sessionCadence, volumeLoad, strengthProgression]
        - in: query
          name: period
          schema:
            type: string
            example: 28d
      responses:
        '200':
          description: Analytics payload
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        goals: { type: string, enum: [strength, hypertrophy, fat-loss, cardio, rehab] }
        experienceLevel: { type: string, enum: [beginner, intermediate, advanced] }
        preferredTrainingDays:
          type: array
          items:
            type: string
        methodology: { type: string }
        equipment:
          type: array
          items: { type: string }
        prBench1RM: { type: number }
        prSquat1RM: { type: number }
        prDeadlift1RM: { type: number }
    GeneratedTrainingPlan:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        weeks: { type: integer }
        schedule:
          type: array
          items: { type: string }
        dayPurposes:
          type: object
          additionalProperties: { type: string }
        rationale: { type: string }
        status: { type: string, enum: [proposed, active, completed, archived] }
        recommitable: { type: boolean }
    GeneratedTrainingSessionPlan:
      type: object
      properties:
        id: { type: string }
        planId: { type: string }
        date: { type: string, format: date }
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExercisePrescription'
    ExercisePrescription:
      type: object
      properties:
        exerciseId: { type: string }
        name: { type: string }
        description: { type: string }
        videoUrl: { type: string, format: uri }
        targetSets: { type: integer }
        targetReps:
          oneOf:
            - type: integer
            - type: array
              items: { type: integer }
        targetLoad:
          oneOf:
            - type: number
            - type: string
            - type: 'null'
        restSeconds: { type: integer }
    SetLog:
      type: object
      properties:
        setIndex: { type: integer }
        weight: { type: number }
        reps: { type: integer }
        rpe: { type: integer, minimum: 1, maximum: 10 }
    SessionFeedback:
      type: object
      properties:
        effortRating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }
    SessionSummary:
      type: object
      properties:
        totalVolume: { type: number }
        prs:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [weight, reps, volume] }
              exerciseId: { type: string }
              value: { type: number }
